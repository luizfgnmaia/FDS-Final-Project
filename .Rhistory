m = 1
for(i in 2:nrow(maior_por_mes)) {
if(!(clube[j] == maior_por_mes$Clube[i] & pais[j] == maior_por_mes$Pais[i])) {
meses[j] = m
ate[j] = maior_por_mes$Data[i-1]
j = j + 1
m = 1
clube[j] = maior_por_mes$Clube[i]
pais[j] = maior_por_mes$Pais[i]
de[j] = maior_por_mes$Data[i]
} else {
m = m + 1
}
}
ate = c(ate, NA)
meses = c(meses, m)
maiores_streaks = tibble(Clube = clube, Pais = pais, De = de, Ate = ate, Meses = meses) %>%
mutate(De = format(as.Date(De), "%b %Y"),
Ate = format(as.Date(Ate), "%b %Y")) %>%
arrange(desc(Meses)) %>%
inner_join(flags_df) %>%
mutate(Clube = paste(flag, Clube),
Meses = as.integer(Meses)) %>%
select(-Pais, -flag)
#################################################################################
# Tabela dos dados
#################################################################################
competicao = c("Copa Libertadores", "Copa Sudamericana", "Recopa Sudamericana",
"Superliga", "Copa Argentina", "Copa de la Superliga", "Super Cup",
"Division Professional",
"Série A", "Copa do Brasil",
"Primera Division", "Chilean Cup", "Super Cup",
"Liga Aguila", "Copa Aguila", "Super Cup",
"Liga Pro", "Copa Ecuador",
"Primera Division", "Copa Paraguay",
"Liga 1", "Copa Bicentenario",
"Primera Division", "Super Cup",
"Primera Division", "Copa Venezuela")
pais = c("Continental",  "Continental",  "Continental",
"Argentina", "Argentina", "Argentina", "Argentina",
"Bolívia",
"Brasil", "Brasil",
"Chile", "Chile", "Chile",
"Colômbia", "Colômbia", "Colômbia",
"Equador", "Equador",
"Paraguai", "Paraguai",
"Peru", "Peru",
"Uruguai", "Uruguai",
"Venezuela", "Venezuela")
ano_inicio = c("2002", "2002", "2003",
"2002", "2011", "2019", "2012",
"2002", "2002", "2009",
"2002", "2009", "2013",
"2002", "2008", "2013",
"2002", "2019",
"2002", "2019",
"2002", "2019",
"2002", "2018",
"2002", "2003")
tabela_dados = tibble(Competicao = competicao, Pais = pais, `A partir de` = ano_inicio) %>%
inner_join(flags_df) %>%
mutate(Competicao = paste(flag, Competicao)) %>%
select(-flag, -Pais)
#################################################################################
# Confrontos internacionais
#################################################################################
sula = read.csv("data/jogossulaid.csv") %>%
select(-X, -date, -tourn) %>%
mutate(p1 = NA, p2 = NA) %>%
mutate(resultado = if_else(g1 > g2, "vit",
if_else(g1 == g2, "emp", "der")))
sula$p1[which(sula$id1 > 0 & sula$id1 <= 100)] = "Argentina"
sula$p1[which(sula$id1 > 100 & sula$id1 <= 200)] = "Bolívia"
sula$p1[which(sula$id1 > 200 & sula$id1 <= 300)] = "Brasil"
sula$p1[which(sula$id1 > 300 & sula$id1 <= 400)] = "Chile"
sula$p1[which(sula$id1 > 400 & sula$id1 <= 500)] = "Colômbia"
sula$p1[which(sula$id1 > 500 & sula$id1 <= 600)] = "Equador"
sula$p1[which(sula$id1 > 600 & sula$id1 <= 700)] = "Paraguai"
sula$p1[which(sula$id1 > 700 & sula$id1 <= 800)] = "Peru"
sula$p1[which(sula$id1 > 800 & sula$id1 <= 900)] = "Uruguai"
sula$p1[which(sula$id1 > 900 & sula$id1 <= 1000)] = "Venezuela"
sula$p2[which(sula$id2 > 0 & sula$id2 <= 100)] = "Argentina"
sula$p2[which(sula$id2 > 100 & sula$id2 <= 200)] = "Bolívia"
sula$p2[which(sula$id2 > 200 & sula$id2 <= 300)] = "Brasil"
sula$p2[which(sula$id2 > 300 & sula$id2 <= 400)] = "Chile"
sula$p2[which(sula$id2 > 400 & sula$id2 <= 500)] = "Colômbia"
sula$p2[which(sula$id2 > 500 & sula$id2 <= 600)] = "Equador"
sula$p2[which(sula$id2 > 600 & sula$id2 <= 700)] = "Paraguai"
sula$p2[which(sula$id2 > 700 & sula$id2 <= 800)] = "Peru"
sula$p2[which(sula$id2 > 800 & sula$id2 <= 900)] = "Uruguai"
sula$p2[which(sula$id2 > 900 & sula$id2 <= 1000)] = "Venezuela"
mat_confrontos = matrix(0, nrow = 10, ncol = 10)
colnames(mat_confrontos) = paises
rownames(mat_confrontos) = paises
for(i in 1:10) {
for(j in 1:10) {
if(i!=j) {
vit = 0
emp = 0
tmp1 = sula %>%
filter(p1 == rownames(mat_confrontos)[i],
p2 == colnames(mat_confrontos)[j])
c1 = count(tmp1, resultado)
n1 = nrow(tmp1)
tmp_vit = c1 %>%
filter(resultado == "vit") %>%
.$n
if(length(tmp_vit) > 0) {
vit = vit + tmp_vit
}
tmp_emp = c1 %>%
filter(resultado == "emp") %>%
.$n
if(length(tmp_emp) > 0) {
emp = emp + tmp_emp
}
tmp2 = sula %>%
filter(p2 == rownames(mat_confrontos)[i],
p1 == colnames(mat_confrontos)[j])
c2 = count(tmp2, resultado)
n2 = nrow(tmp2)
tmp_vit = c2 %>%
filter(resultado == "der") %>%
.$n
if(length(tmp_vit) > 0) {
vit = vit + tmp_vit
}
tmp_emp = c2 %>%
filter(resultado == "emp") %>%
.$n
if(length(tmp_emp) > 0) {
emp = emp + tmp_emp
}
n = n1 + n2
mat_confrontos[i, j] = (2*vit + emp) / (n*2)
}
}
}
diag(mat_confrontos) = NA
df_confrontos = tibble()
for(i in 1:10) {
for(j in 1:10) {
tmp = tibble(Origem = rownames(mat_confrontos)[i],
Adversario = colnames(mat_confrontos)[j],
Aproveitamento = mat_confrontos[j,i])
df_confrontos = df_confrontos %>%
rbind(tmp)
}
}
df_confrontos = df_confrontos %>%
mutate(text = as.character(round(Aproveitamento, 2)) %>%
str_replace_all("\\.", ","))
df_confrontos$text[is.na(df_confrontos$text)] = ""
#################################################################################
# Vantagem do mandante e partidas por confederação
#################################################################################
files = c("data/jogosarg.csv", "data/jogosbol.csv", "data/jogosbra.csv", "data/jogoschi.csv", "data/jogoscol.csv",
"data/jogosecu.csv", "data/jogospar.csv", "data/jogosper.csv", "data/jogosuru.csv", "data/jogosven.csv",
"data/jogossula.csv", "data/jogosid.csv")
conf = c(paises, "Conmebol", "Todas")
df_mandante = data.frame()
df_partidas = data.frame()
for(i in 1:length(files)) {
jogos = read.csv(files[i]) %>%
mutate(resultado = if_else(g1 > g2, "Mandante",
if_else(g1 == g2, "Empate", "Visitante")))
n = nrow(jogos)
c = count(jogos, resultado)
mandante = c$n[which(c$resultado == "Mandante")]
empate = c$n[which(c$resultado == "Empate")]
visitante = c$n[which(c$resultado == "Visitante")]
tmp = tibble(Confederacao = c(conf[i], conf[i], conf[i]),
Vencedor = c("Mandante", "Empate", "Visitante"),
Freq = c(100*mandante/n, 100*empate/n, 100*visitante/n),
n = c(mandante, empate, visitante))
df_mandante = df_mandante %>%
rbind(tmp)
tmp2 = tibble(Confederacao = conf[i],
Partidas = n)
df_partidas = df_partidas %>%
rbind(tmp2)
}
ordem_conf = c("Todas", "Conmebol", paises)
ordem_vencedor = c("Mandante", "Empate", "Visitante")
df_mandante = df_mandante %>%
mutate(Confederacao = factor(Confederacao, levels = ordem_conf),
Vencedor = factor(Vencedor, levels = ordem_vencedor),
text = paste0(n, " (", round(Freq, 2), "%)"))
total = max(df_partidas$Partidas)
df_partidas = df_partidas %>%
mutate(Confederacao = factor(Confederacao, levels = ordem_conf),
porc = round(100*Partidas/total, 2),
text = paste0(Partidas, " (", porc, "%)"))
#################################################################################
# Placares mais comuns
#################################################################################
tmp = read.csv("data/jogosid.csv") %>%
mutate(Placar = paste(g1, "x", g2)) %>%
count(Placar) %>%
arrange(desc(n))
placares = tmp %>%
head(20)
outros = sum(tmp$n) - sum(placares$n)
total = sum(tmp$n)
placares = placares %>%
rbind(data.frame(Placar = "Outros", n = outros)) %>%
mutate(Placar = factor(Placar, levels = Placar),
porc = round(100*n/total, 2),
text = paste0(n, " (", porc, "%)"))
#################################################################################
rm(list = setdiff(ls(), c("dados", "clubes", "paises", "datas", "len_datas",
"melhores_clubes", "maiores_streaks", "tabela_dados",
"df_confrontos", "df_mandante", "df_partidas",
"placares")))
save.image("pre_shiny.RData")
runApp()
runApp()
options(encoding = "UTF-8")
options(OutDec = ",")
source("dependencies.R") # https://github.com/rstudio/shinydashboard/issues/190
source("aux_shiny.R")
load("pre_shiny.RData")
# https://fontawesome.com/icons?from=io
flags_df = tibble(Pais = c("Argentina", "Bolívia", "Brasil", "Chile", "Colômbia", "Equador",
"Paraguai", "Peru", "Uruguai", "Venezuela", "Continental"),
flag = c('<img src="https://flagpedia.net/data/flags/mini/ar.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/bo.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/br.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/cl.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/co.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/ec.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/py.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/pe.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/uy.png" width="29" height="20" /></a>',
'<img src="https://flagpedia.net/data/flags/mini/ve.png" width="29" height="20" /></a>',
'<img src="https://upload.wikimedia.org/wikipedia/en/thumb/a/a8/CONMEBOL_logo_%282017%29.svg/278px-CONMEBOL_logo_%282017%29.svg.png" width="29" height="20" /></a>'))
#################################################################################
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Introdução", icon = icon("youtube"), tabName = "int"),
menuItem("Rankings", icon = icon("trophy"), tabName = "rank"),
menuItem("Histórico", icon = icon("chart-line"), tabName = "hist"),
menuItem("Dados", icon = icon("database"), tabName = "dados",
menuSubItem("Fonte dos dados", tabName = "fonte"),
menuSubItem("Tratamento na base", tabName = "tratamento")),
menuItem("Análise exploratória", icon = icon("chart-bar"), tabName = "eda",
menuSubItem("Partidas por confederação", tabName = "partidas"),
menuSubItem("Placares mais comuns", tabName = "placares"),
menuSubItem("Mando de campo", tabName = "mando"),
menuSubItem("Confrontos internacionais", tabName = "confrontos")),
menuItem("Modelagem", icon = icon("question"), tabName = "model"),
menuItem("Resultados", icon = icon("poll-h"), tabName = "result",
menuSubItem("Melhores clubes", tabName = "melhores_clubes"),
menuSubItem("Mais tempo na liderança", tabName = "tempo_lideranca")),
menuItem("Próximos passos", icon = icon("forward"), tabName = "next"),
menuItem("Github", icon = icon("github"), href = "https://github.com/luizfgnmaia/FDS-Final-Project")
)
)
#################################################################################
body <- dashboardBody(
tabItems(
# Introdução
#################################################################################
tabItem(tabName = "int",
HTML('<iframe width="900" height="600" src="https://www.youtube.com/embed/AREB7MCGaUY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'),
h2("Introdução"),
HTML("<p>Uma vez Flamengo, sempre Flamengo</p>
<p>Flamengo sempre eu hei de ser</p>
<p>É meu maior prazer vê-lo brilhar</p>
<p>Seja na terra, seja no mar</p>
<p>Vencer, vencer, vencer!</p>
<p>Uma vez Flamengo, Flamengo até morrer!</p>
<p>Na regata, ele me mata</p>
<p>Me maltrata, me arrebata</p>
<p>Que emoção no coração!</p>
<p>Consagrado no gramado</p>
<p>Sempre amado, o mais cotado</p>
<p>Nos Fla-Flus é o Ai, Jesus!</p>
<p>Eu teria um desgosto profundo</p>
<p>Se faltasse o Flamengo no mundo</p>
<p>Ele vibra, ele é fibra</p>
<p>Muita libra já pesou</p>
<p>Flamengo até morrer eu sou!</p>")
),
#################################################################################
# Rankings
#################################################################################
tabItem(tabName = "rank",
h2("Ranking mensal geral ou por país"),
uiOutput("rank_ui"),
mydateInput("rank_data",
"Mês",
format = "mm-yyyy",
language = "pt-BR",
width = 78,
min = datas[2],
max = datas[len_datas],
value = datas[len_datas]),
tableOutput("rank_table")
),
#################################################################################
# Histórico
#################################################################################
tabItem(h2("Série temporal da pontuação dos clubes"),
tabName = "hist",
uiOutput("hist_ui"), # https://stackoverflow.com/questions/40996536/shiny-r-select-input-is-not-working
plotlyOutput("hist_plot"),
textOutput("debug")
),
#################################################################################
# Análise exploratória
#################################################################################
tabItem(tabName = "partidas",
h2("Quantidade de partidas por confederação"),
plotlyOutput("partidas")),
tabItem(tabName = "placares",
h2("Placares mais comuns"),
plotlyOutput("placares")),
tabItem(tabName = "mando",
h2("Influência do mando de campo por confederação"),
plotlyOutput("mando")),
tabItem(tabName = "confrontos",
h2("Aproveitamento nos confrontos internacionais"),
HTML('A entrada <b>(i,j)</b> desta matriz representa o aproveitamento dos clubes do país <b>i</b>  contra adversários do país <b>j</b>.'),
plotlyOutput("confrontos")),
#################################################################################
# Dados
#################################################################################
tabItem(tabName = "fonte",
h2("Fonte dos dados"),
HTML('Os dados foram coletados do site <a href="https://www.flashscore.com/">FlashScore.com</a>
utilizando o pacote <a href="https://pypi.org/project/selenium/">Selenium</a> do Python.'),
h2("Base de dados"),
HTML('A base de dados utilizado para a construção do ranking é composta pelos resultados das seguintes competições:'),
tableOutput("competicoes")
),
tabItem(tabName = "tratamento"),
#################################################################################
# Modelagem
#################################################################################
tabItem(tabName = "model"),
#################################################################################
# Resultados
#################################################################################
tabItem(tabName = "melhores_clubes",
h2("Melhores clubes considerando a pontuação Elo"),
tableOutput("melhores_clubes")),
tabItem(tabName = "tempo_lideranca",
h2("Clubes que permaneceram mais meses no primeiro lugar do ranking"),
tableOutput("tempo_lideranca")),
# Próximos passos
#################################################################################
tabItem(tabName = "next")
#################################################################################
)
)
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Elo da paz"),
sidebar,
body
)
server <- function(input, output) {
output$hist_plot <- renderPlotly({
validate(need(!is.na(input$hist_clube), message = "")) # https://stackoverflow.com/questions/42789819/prevent-error-in-shiny-app-render-plot
p = dados %>%
filter(Clube %in% input$hist_clube) %>%
mutate(text = paste0("Clube: ", Clube, "<br>",
"Mês: ", format(Data, "%b %Y"),
"Elo: ", round(Elo, 2))) %>%
ggplot(aes(x = Data, y = Elo, group = 1, text = text)) + # https://stackoverflow.com/questions/45948926/ggplotly-text-aesthetic-causing-geom-line-to-not-display
geom_line(aes(color = Clube), size = 0.75) +
tema +
xlab("")
p %>%
ggplotly(tooltip = c("text")) %>%
layout(plot_bgcolor = 'rgba(0, 0, 0, 0)', # https://community.plot.ly/t/create-plots-with-transparent-background/14658
paper_bgcolor = 'rgba(0, 0, 0, 0)')
})
output$hist_ui <- renderUI({
selectInput("hist_clube",
"Clube",
choices = clubes,
selected = clubes[1],
multiple = TRUE)
})
output$rank_ui <- renderUI({
selectInput("rank_pais",
"País",
choices = paises,
selected = NULL,
multiple = TRUE)
})
output$rank_table <- renderTable({
reac_rank_table = reactive({
data_atual = datas[which(abs(datas-input$rank_data) == min(abs(datas-input$rank_data)))]
data_anterior = datas[which(abs(datas-input$rank_data) == min(abs(datas-input$rank_data)))-1]
if(is.null(input$rank_pais)) {
atual = dados %>%
filter(Data == data_atual) %>%
arrange(desc(Elo)) %>%
mutate(new_pos = row_number())
anterior = dados %>%
filter(Data == data_anterior) %>%
arrange(desc(Elo)) %>%
mutate(old_pos = row_number()) %>%
rename(old_elo = Elo) %>%
select(Clube, old_pos, old_elo)
atual %>%
inner_join(anterior) %>%
mutate(dif_pos = ifelse((old_pos - new_pos) != 0, as.character(old_pos - new_pos), ""),
tmp_pos = up_or_down(dif_pos),
Clube = paste(Clube, tmp_pos, ifelse(dif_pos == "", "", as.character(abs(as.integer(dif_pos))))),
dif_elo = Elo - old_elo,
Elo = paste(round(Elo, 2), delta(dif_elo))) %>%
rename('Elo <font style="opacity:.5"> (variação)' = Elo) %>%
inner_join(flags_df) %>%
mutate(Clube = paste(flag, Clube)) %>%
select(Clube, 'Elo <font style="opacity:.5"> (variação)')
} else {
atual = dados %>%
filter(Data == data_atual,
Pais %in% input$rank_pais) %>%
arrange(desc(Elo)) %>%
mutate(new_pos = row_number())
anterior = dados %>%
filter(Data == data_anterior,
Pais %in% input$rank_pais) %>%
arrange(desc(Elo)) %>%
mutate(old_pos = row_number()) %>%
rename(old_elo = Elo) %>%
select(Clube, old_pos, old_elo)
atual %>%
inner_join(anterior) %>%
mutate(dif_pos = ifelse((old_pos - new_pos) != 0, as.character(old_pos - new_pos), ""),
tmp_pos = up_or_down(dif_pos),
Clube = paste(Clube, tmp_pos, ifelse(dif_pos == "", "", as.character(abs(as.integer(dif_pos))))),
dif_elo = Elo - old_elo,
Elo = paste(round(Elo, 2), delta(dif_elo))) %>%
rename('Elo <font style="opacity:.5"> (variação)' = Elo) %>%
inner_join(flags_df) %>%
mutate(Clube = paste(flag, Clube)) %>%
select(Clube, 'Elo <font style="opacity:.5"> (variação)')
}
})
reac_rank_table()
}, rownames = TRUE, striped = TRUE, hover = TRUE, width = 700,
sanitize.text.function = function(x) x) # https://www.oipapio.com/question-8798651
output$melhores_clubes <- renderTable(melhores_clubes, rownames = TRUE,
striped = TRUE, hover = TRUE, width = 700,
sanitize.text.function = function(x) x)
output$tempo_lideranca <- renderTable(maiores_streaks %>%
rename(Até = Ate),
rownames = TRUE,
striped = TRUE, hover = TRUE, width = 700,
sanitize.text.function = function(x) x,
na = " ")
output$competicoes <- renderTable(tabela_dados %>%
rename(Competição = Competicao),
striped = TRUE, hover = TRUE, width = 700,
sanitize.text.function = function(x) x)
output$confrontos <- renderPlotly({
plot_ly(x = df_confrontos$Origem, y = df_confrontos$Adversario, z = df_confrontos$Aproveitamento, type = "heatmap", colorscale = "RdBu",
reversescale = TRUE, hoverinfo = "none") %>%
layout(plot_bgcolor = 'rgba(0, 0, 0, 0)',
paper_bgcolor = 'rgba(0, 0, 0, 0)',
xaxis = list(title = FALSE, fixedrange = TRUE),
yaxis = list(title = FALSE, fixedrange = TRUE)) %>%
add_annotations(x = df_confrontos$Origem, y = df_confrontos$Adversario, text = df_confrontos$text,
showarrow = FALSE, font = list(color = 'black'))
})
output$partidas <- renderPlotly({
p = df_partidas %>%
rename(Confederação = Confederacao) %>%
ggplot(aes(x = Confederação, y = Partidas, text = text)) +
geom_bar(stat = "identity", position = "dodge", fill = "#F8766D") +
tema +
xlab("") +
ylab("Partidas")
p %>%
ggplotly(tooltip = c("text")) %>%
layout(plot_bgcolor = 'rgba(0, 0, 0, 0)',
paper_bgcolor = 'rgba(0, 0, 0, 0)')
})
output$mando <- renderPlotly({
p = df_mandante %>%
ggplot(aes(x = Confederacao, y = Freq, fill = Vencedor, text = text)) +
geom_bar(stat = "identity", position = "dodge") +
tema +
xlab("") +
ylab("Resultado (%)")
p %>%
ggplotly(tooltip = c("text")) %>%
layout(plot_bgcolor = 'rgba(0, 0, 0, 0)',
paper_bgcolor = 'rgba(0, 0, 0, 0)')
})
output$placares <- renderPlotly({
p = placares %>%
ggplot(aes(x = Placar, y = n, text = text)) +
geom_bar(stat = "identity", position = "dodge", fill = "#F8766D") +
tema +
xlab("") +
ylab("Quantidade")
p %>%
ggplotly(tooltip = c("text")) %>%
layout(plot_bgcolor = 'rgba(0, 0, 0, 0)',
paper_bgcolor = 'rgba(0, 0, 0, 0)')
})
#output$debug = renderText(input$rank_pais)
}
shinyApp(ui, server)
runApp()
runApp()
